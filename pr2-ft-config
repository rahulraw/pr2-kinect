#!/usr/bin/env python

import sys
import os
import stat
import argparse
import subprocess

class Failure(Exception):
    pass

def cal_file(serial):
    return os.path.join("/usr/share/pr2-ft", "ft%s_params.yaml"%(serial))

def check_cal_file(serial):
    path = cal_file(serial)
    return os.path.exists(path)

def config_launch(args):
    launch = """<launch>
<!-- WARNING: this file is autogenerated by the pr2-ft-config tool.
     Your modifications may be overwritten without notice. -->
"""

    if args.left:
        launch += """  <!-- Left Force/Torque -->
  <group ns="/realtime_loop/l_gripper_motor/">
    <param name="enable_ft_sensor" value="True" type="bool"/>    
    <param name="enable_pressure_sensor" value="True" type="bool"/>
    <rosparam command="load" file="%s"/>
    <rosparam command="load" file="/usr/share/pr2-ft/wg035_revF_params.yaml"/>
  </group>
"""%(cal_file(args.left))

    if args.right:
        launch += """  <!-- Right Force/Torque -->
  <group ns="/realtime_loop/r_gripper_motor/">
    <param name="enable_ft_sensor" value="True" type="bool"/>    
    <param name="enable_pressure_sensor" value="True" type="bool"/>
    <rosparam command="load" file="%s"/>
    <rosparam command="load" file="/usr/share/pr2-ft/wg035_revF_params.yaml"/>
  </group>
"""%(cal_file(args.right))

    launch += "</launch>\n"

    launch_path = "/etc/ros"
    if args.distro:
        launch_path = os.path.join(launch_path, args.distro, 'ft.launch')
    else:
        launch_path = os.path.join(launch_path, 'distro', 'ft.launch')

    if args.debug:
        print "F/T Launch file: %s"%(launch_path)

    if os.access(launch_path, os.R_OK | os.W_OK):
        out = open(launch_path, 'w')
        out.write(launch)
        out.close()
    else:
        raise Failure("Cannot write launch file (%s). Try sudo?"%(launch_path))
        

def find_base_urdf(args):
    path = '/etc/ros'
    if args.distro:
        path = os.path.join(path, args.distro)
    else:
        path = os.path.join(path, 'distro')
    path = os.path.join(path, 'urdf', 'robot.xml')

    if args.debug:
        print "Looking for URDF: %s"%(path)

    if not os.path.isfile(path):
        if args.distro:
            raise Failure("Failed to find URDF for %s"%(args.distro))
        else:
            raise Failure("Failed to find URDF")

    # resolve symbolic links
    path = os.path.realpath(path)

    if args.debug:
        print "Found URDF: %s"%(path)

    # Try to strip any _ft_* that may have been configured before
    if path.endswith('.xml'):
        prefix = path[0:-4]
        basepath = path
        for suffix in ['_ft_left', '_ft_right', '_ft_both']:
            if prefix.endswith(suffix):
                if args.debug:
                    print "Removing URDF suffix %s"%(suffix)
                basepath = prefix[0:-len(suffix)] + '.xml'
    else:
        raise Failure("URDF is not an XML file: %s"%(urdf_path))

    if args.debug:
        print "Found base URDF: %s"%(basepath)
    # resolve symbolic links
    return os.path.realpath(basepath)

def patch_file(infile, patch, outfile, debug):
    cmd = ['patch',  '-i', patch, '-o', outfile, infile ]
    if debug:
        print "Patch command: %s"%(" ".join(cmd))
    patch = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
    (out, err) = patch.communicate()
    ret = patch.wait()
    if ret != 0:
        os.remove(outfile)
        os.remove(outfile + '.rej')
        raise Failure("Patch URDF failed:\n%s\n\n%s\n"%(" ".join(cmd), out))
    os.chmod(outfile, stat.S_IRUSR|stat.S_IWUSR|stat.S_IRGRP|stat.S_IROTH )
    if debug:
        print "Patch succeeded"

def setup_urdfs(path, distro, debug):

    base = path[0:-4]
    if base.endswith('_ft_left') or base.endswith('_ft_right') or base.endswith('_ft_both'):
        raise Failure("Tried to use non-base URDF as a base: %s"%(path))

    left = base + '_ft_left.xml'
    right = base + '_ft_right.xml'
    both = base + '_ft_both.xml'

    left_patch  = "/usr/share/pr2-ft/ft_left.%s.patch"%(distro)
    right_patch = "/usr/share/pr2-ft/ft_right.%s.patch"%(distro)

    if debug:
        print "Using left patch: %s"%(left_patch)
        print "Using right patch: %s"%(right_patch)

    # Check that our patch files exist
    if not os.path.isfile(left_patch) and not os.path.isfile(right_patch):
        raise Failure("F/T patch files do not exist for %s"%(distro))

    if not os.path.isfile(left_patch):
        raise Failure("Left F/T patch does not exist for %s"%(distro))

    if not os.path.isfile(right_patch):
        raise Failure("Right F/T patch does not exist for %s"%(distro))

    # Check that we have permissions to create URDFs
    urdf_dir = os.path.dirname(path)
    if not os.access(urdf_dir, os.R_OK | os.W_OK):
        raise Failure("Cannot write to URDF directory (%s). Try sudo?"%(
                    urdf_dir))

    # Create patched URDFs if they don't exist
    if not os.path.exists(left):
        # patch base URDF to produce URDF with left F/T
        if debug:
            print "Left URDF does not exist; creating it: %s"%(left)
        patch_file(path, left_patch, left, debug)

    if not os.path.exists(right):
        # patch base URDF to produce URDF with right F/T
        if debug:
            print "Right URDF does not exist; creating it: %s"%(right)
        patch_file(path, right_patch, right, debug)

    if not os.path.exists(both):
        # patch left URDF to produce URDF with both F/T
        if debug:
            print "Both URDF does not exist; creating it: %s"%(both)
        patch_file(left, right_patch, both, debug)

    return (base, left, right, both)

def select_urdf(args, paths):
    assert(len(paths) == 4)

    path = None
    if args.left and args.right:
        if args.debug:
            print "Select both sensors: %s"%(paths[3])
        path = paths[3]
    elif args.left:
        if args.debug:
            print "Select left sensor: %s"%(paths[1])
        path = paths[1]
    elif args.right:
        if args.debug:
            print "Select right sensor: %s"%(paths[2])
        path = paths[2]
    else:
        if args.debug:
            print "Select default URDF: %s"%(paths[0])
        path = paths[0]
    assert(os.path.isfile(path))

    base = os.path.dirname(path)
    uncal = os.path.join(base, 'robot_uncalibrated.xml')
    cal = os.path.join(base, 'robot.xml')

    # Check that we have permissions to modify the URDF directory
    if not os.access(base, os.R_OK | os.W_OK):
        raise Failure("Cannot write to URDF directory (%s). Try sudo?"%(base))

    # remove uncalibrated URDF if it's a symlink
    if os.path.lexists(uncal):
        if os.path.islink(uncal):
            if args.debug:
                print "Remove old uncal symlink: %s"%(uncal)
            os.remove(uncal)
        else:
            raise Failure("Uncalibrated URDF is not a symlink: %s"%(uncal))
    elif args.debug:
        print "Uncal symlink does not exist: %s"%(uncal)

    # remove default URDF if it's a symlink
    if os.path.lexists(cal):
        if os.path.islink(cal):
            if args.debug:
                print "Remove old default symlink: %s"%(cal)
            os.remove(cal)
        else:
            raise Failure("Default URDF is not a symlink: %s"%(cal))
    elif args.debug:
        print "Default symlink does not exist: %s"%(cal)

    # Create new URDF symlinks
    os.symlink(path, uncal)
    os.symlink(path, cal)


def main():
    parser = argparse.ArgumentParser(
            description="Configure Force-Torque sensors on the PR2")
    parser.add_argument('-l', '--left',
            help='Left F/T serial number')
    parser.add_argument('-r', '--right',
            help='Right F/T serial number')

    parser.add_argument('-u', '--urdf', nargs='?', const='',
            help='Configure URDF [ Base URDF ]')
    parser.add_argument('--launch', action='store_true',
            help='Configure launch file')

    parser.add_argument('-d', '--distro', 
            help='ROS distro to configure')
    parser.add_argument('--debug', action='store_true',
            help='Enable debugging output')
            

    args = parser.parse_args()

    # Detect system ROS distro
    if not args.distro:
        args.distro = os.path.basename(os.path.realpath('/etc/ros/distro'))
        if args.debug:
            print "Detected ROS distro as %s"%(args.distro)

    if args.urdf == None and not args.launch:
        if args.debug:
            print "Neither --urdf nor --launch specified; assuming both"
        args.urdf = ''
        args.launch = True

    # Find the URDF
    urdf_path = None
    if args.urdf != None:
        # If the user gave us a path, use it
        if len(args.urdf) > 0:
            urdf_path = args.urdf
            # check that the user gave us a path that actually exists
            if os.path.isfile(urdf_path):
                urdf_path = os.path.realpath(urdf_path)
            else:
                print "URDF path does not exist: %s"%(urdf_path)
                sys.exit(-1)
        else:
            # Find the URDF based on the ROS distro
            try:    
                urdf_path = find_base_urdf(args)
            except Failure as e:
                print "ERROR:", e
                sys.exit(-1)

        urdf_paths = (urdf_path, None, None, None)

    # verify that left cal file exists
    if args.left:
        if not check_cal_file(args.left):
            print "ERROR: calibration file does not exist for sensor %s"%(
                    args.left)
            if args.debug:
                print "Expect calibration file at %s"%(cal_file(args.left))
            sys.exit(-1)

    # verify that right cal file exists
    if args.right:
        if not check_cal_file(args.right):
            print "ERROR: calibration file does not exist for sensor %s"%(
                    args.right)
            if args.debug:
                print "Expect calibration file at %s"%(cal_file(args.right))
            sys.exit(-1)

    # verify that left and right are not the same
    if args.left and args.right:
        if args.right == args.left:
            print "ERROR: the same sensor cannot be mounted on both grippers"
            sys.exit(-1)


    # if we're configuraing a sensor, patch the URDF
    if args.left or args.right:
        if urdf_path:
            try:
                urdf_paths = setup_urdfs(urdf_path, args.distro, args.debug)
            except Failure as e:
                print "ERROR:", e
                sys.exit(-1)

    # Configure the launch file
    if args.launch:
        if args.left and args.right:
            print "Configuring launch files with left = %s and right = %s"%(
                    args.left, args.right)
        elif args.left:
            print "Configuring launch files with left = %s"%(args.left)
        elif args.right:
            print "Configuring launch files with right = %s"%(args.right)
        else:
            print "Configuring launch files without F/T sensors"
        try:
            config_launch(args)
        except Failure as e:
            print "ERROR:", e
            sys.exit(-1)


    # Choose the correct URDF
    if urdf_path:
        try:
            select_urdf(args, urdf_paths)
        except Failure as e:
            print "ERROR:", e
            sys.exit(-1)
        print "URDF updated. You should run a full-system calibration: http://www.ros.org/wiki/pr2_calibration/Tutorials/Calibrating%20the%20PR2"

if __name__ == '__main__':
    main()
